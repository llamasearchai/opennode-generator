#!/usr/bin/env node

/**
 * OpenNode - Complete Master Program Demo
 * ==============================================
 * 
 * This demo showcases the complete functionality of the OpenNode system:
 * - AI-powered package generation
 * - Automated testing infrastructure  
 * - Docker integration
 * - FastAPI endpoints integration
 * - OpenAI agents SDK integration
 * - Complete build automation
 */

const { OpenNode } = require('./dist/index.js');
const path = require('path');
const fs = require('fs-extra');

async function demonstrateCompleteMasterProgram() {
  console.log('OpenNode - Complete Master Program Demo\n');
  console.log('='.repeat(60));
  
  try {
    // Initialize the OpenNode system
    console.log('Initializing OpenNode...');
    const openNode = new OpenNode();
    
    // Define package configuration for demo
    const config = {
      packageName: 'demo-complete-package',
      description: 'A complete demonstration package generated by OpenNode',
      version: '1.0.0',
      license: 'MIT',
      packageType: 'library',
      qualityLevel: 'enterprise',
      outputDir: path.join(__dirname, 'demo-output'),
      enableTesting: true,
      enableDocumentation: true,
      enableLinting: true,
      enableTypeScript: true,
      enableGitInit: true,
      enableCodexIntegration: true,
      enableOpenAIAgents: true,
      enableCICD: true,
      enableDocker: true,
      enableSecurity: true,
      enablePerformanceMonitoring: true,
    };
    
    console.log('\nConfiguration:');
    console.log(`  - Package: ${config.packageName}`);
    console.log(`  - Type: ${config.packageType}`);
    console.log(`  - Quality: ${config.qualityLevel}`);
    console.log(`  - Features: TypeScript, Testing, Docker, FastAPI, AI Agents`);
    
    // Generate the complete package
    console.log('\nGenerating complete package...');
    const result = await openNode.generatePackage(config);
    
    if (result.success) {
      console.log('Package generation successful!');
      console.log(`\nGeneration Statistics:`);
      console.log(`  - Quality Score: ${result.metadata.qualityScore}%`);
      console.log(`  - Files Created: ${result.metadata.filesCreated}`);
      console.log(`  - Lines of Code: ${result.metadata.linesOfCode}`);
      console.log(`  - Generation Time: ${result.metadata.generationTime}ms`);
      console.log(`  - Package Size: ${result.metadata.packageSizeKB}KB`);
      console.log(`  - Dependencies: ${result.metadata.dependencyCount}`);
      console.log(`  - Dev Dependencies: ${result.metadata.devDependencyCount}`);
      
      console.log(`\nFeatures Enabled:`);
      console.log(`  - TypeScript: Yes`);
      console.log(`  - Testing: Yes`);
      console.log(`  - Linting: Yes`);
      console.log(`  - Documentation: Yes`);
      console.log(`  - CI/CD: ${result.metadata.cicdConfigured ? 'Yes' : 'No'}`);
      console.log(`  - Docker: ${result.metadata.dockerized ? 'Yes' : 'No'}`);
      console.log(`  - Security: ${result.metadata.securityConfigured ? 'Yes' : 'No'}`);
      console.log(`  - AI Codex: ${result.metadata.codexIntegrated ? 'Yes' : 'No'}`);
      console.log(`  - AI Agents: ${result.metadata.agentsConfigured ? 'Yes' : 'No'}`);
      console.log(`  - AI Enhanced: ${result.metadata.aiEnhanced ? 'Yes' : 'No'}`);
      
      console.log(`\nGenerated Files:`);
      result.files.slice(0, 10).forEach(file => {
        const relativePath = path.relative(result.packagePath, file);
        console.log(`  - ${relativePath}`);
      });
      if (result.files.length > 10) {
        console.log(`  ... and ${result.files.length - 10} more files`);
      }
      
      // Check if key files exist
      console.log(`\nVerifying Key Components:`);
      const keyFiles = [
        'package.json',
        'tsconfig.json', 
        'src/index.ts',
        'test/index.test.ts',
        'README.md',
        'Dockerfile',
        '.github/workflows/ci.yml'
      ];
      
      for (const file of keyFiles) {
        const filePath = path.join(result.packagePath, file);
        const exists = await fs.pathExists(filePath);
        console.log(`  - ${file}: ${exists ? 'Yes' : 'No'}`);
      }
      
      console.log(`\nComplete Master Program Features:`);
      console.log(`  - AI-powered package generation`);
      console.log(`  - Complete automated testing infrastructure`);
      console.log(`  - TypeScript compilation and type checking`);
      console.log(`  - ESLint code quality analysis`);
      console.log(`  - Prettier code formatting`);
      console.log(`  - Jest testing framework setup`);
      console.log(`  - GitHub Actions CI/CD pipeline`);
      console.log(`  - Docker containerization`);
      console.log(`  - Security scanning configuration`);
      console.log(`  - Performance monitoring setup`);
      console.log(`  - Comprehensive documentation`);
      console.log(`  - OpenAI Codex CLI integration`);
      console.log(`  - OpenAI Agents SDK integration`);
      console.log(`  - FastAPI endpoints support`);
      console.log(`  - Complete build automation`);
      
      console.log(`\nNext Steps:`);
      console.log(`  1. cd ${result.packagePath}`);
      console.log(`  2. npm install`);
      console.log(`  3. npm test`);
      console.log(`  4. npm run build`);
      console.log(`  5. docker build -t demo-complete-package .`);
      console.log(`  6. npm publish`);
      
      console.log(`\nDemo completed successfully!`);
      console.log(`Package location: ${result.packagePath}`);
      
    } else {
      console.error('Package generation failed:');
      result.errors.forEach(error => console.error(`  - ${error}`));
      if (result.warnings.length > 0) {
        console.warn('\nWarnings:');
        result.warnings.forEach(warning => console.warn(`  - ${warning}`));
      }
    }
    
  } catch (error) {
    console.error('Demo failed:', error.message);
    console.error('\nPlease ensure all dependencies are installed and configuration is correct.');
  }
}

// Run the demo
if (require.main === module) {
  demonstrateCompleteMasterProgram().catch(console.error);
}

module.exports = { demonstrateCompleteMasterProgram }; 