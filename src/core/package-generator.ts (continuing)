  private generateCodeOfConduct(context: GenerationContext): string {
    return `# Code of Conduct

## Our Pledge

We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.

## Our Standards

Examples of behavior that contributes to a positive environment include:

- Demonstrating empathy and kindness toward other people
- Being respectful of differing opinions, viewpoints, and experiences
- Giving and gracefully accepting constructive feedback
- Accepting responsibility and apologizing to those affected by our mistakes
- Focusing on what is best for the overall community

Examples of unacceptable behavior include:

- The use of sexualized language or imagery
- Trolling, insulting or derogatory comments, and personal or political attacks
- Public or private harassment
- Publishing others' private information without explicit permission
- Other conduct which could reasonably be considered inappropriate

## Enforcement

Community leaders will take appropriate corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant](https://www.contributor-covenant.org), version 2.1.
`;
  }

  private generateSecurityPolicy(context: GenerationContext): string {
    return `# Security Policy

## Supported Versions

| Version | Supported          |
| ------- | ------------------ |
| 1.x.x   | :white_check_mark: |

## Reporting a Vulnerability

We take security vulnerabilities seriously. If you discover a security vulnerability in ${context.config.packageName}, please report it privately.

### How to Report

1. **DO NOT** create a public GitHub issue for security vulnerabilities
2. Email us at: security@your-domain.com
3. Include detailed information about the vulnerability
4. Provide steps to reproduce if possible

### What to Include

- Description of the vulnerability
- Steps to reproduce
- Potential impact
- Any suggested fixes

### Response Timeline

- **Initial Response**: Within 48 hours
- **Status Update**: Within 7 days
- **Fix Timeline**: Varies based on severity

### Security Best Practices

When using ${context.config.packageName}:

1. Keep dependencies updated
2. Use the latest stable version
3. Follow secure coding practices
4. Validate all inputs
5. Use HTTPS for all communications

### Vulnerability Disclosure Policy

1. We investigate all reports
2. We provide regular updates during investigation
3. We credit reporters (with permission)
4. We publish security advisories for confirmed vulnerabilities

Thank you for helping keep ${context.config.packageName} secure!
`;
  }

  private async initializeGitRepository(context: GenerationContext): Promise<void> {
    try {
      const { execSync } = require('child_process');
      const gitDir = path.join(context.packagePath, '.git');
      
      if (!await fs.pathExists(gitDir)) {
        execSync('git init', { cwd: context.packagePath });
        execSync('git add .', { cwd: context.packagePath });
        execSync('git commit -m "Initial commit"', { cwd: context.packagePath });
        this.logger.debug('Git repository initialized');
      }
    } catch (error) {
      this.logger.warn('Failed to initialize git repository', error);
    }
  }

  private async calculateMetrics(context: GenerationContext, files: string[]): Promise<{
    filesGenerated: number;
    linesOfCode: number;
    testCoverage?: number;
    buildTime: number;
    qualityScore: number;
  }> {
    const filesGenerated = files.length;
    let linesOfCode = 0;
    let qualityScore = 0;

    // Calculate lines of code
    for (const file of files) {
      try {
        const filePath = path.join(context.packagePath, file);
        if (await fs.pathExists(filePath)) {
          const content = await fs.readFile(filePath, 'utf-8');
          linesOfCode += content.split('\n').length;
        }
      } catch (error) {
        // Ignore errors for metrics calculation
      }
    }

    // Calculate quality score based on features enabled
    qualityScore += context.enableTypeScript ? 25 : 0;
    qualityScore += context.enableTesting ? 25 : 0;
    qualityScore += context.enableDocumentation ? 20 : 0;
    qualityScore += context.enableLinting ? 15 : 0;
    qualityScore += context.enableGitInit ? 10 : 0;
    qualityScore += context.qualityLevel === 'enterprise' ? 5 : 0;

    return {
      filesGenerated,
      linesOfCode,
      buildTime: 0, // Will be set by caller
      qualityScore
    };
  }

  private toPascalCase(str: string): string {
    return str
      .replace(/[-_]/g, ' ')
      .replace(/\b\w/g, char => char.toUpperCase())
      .replace(/\s/g, '');
  }
} 