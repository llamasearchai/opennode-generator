{
  "id": "cli-tool",
  "name": "CLI Tool",
  "description": "Command-line interface tool with argument parsing",
  "version": "1.0.0",
  "author": "OpenNode",
  "type": "cli",
  "complexity": "simple",
  "features": [
    "TypeScript",
    "Commander.js",
    "Inquirer",
    "Jest"
  ],
  "dependencies": {
    "commander": "^11.0.0",
    "inquirer": "^9.2.0",
    "chalk": "^5.3.0"
  },
  "devDependencies": {
    "typescript": "^5.2.0",
    "@types/inquirer": "^9.0.0",
    "jest": "^29.6.0",
    "@types/jest": "^29.5.0",
    "ts-jest": "^29.1.0"
  },
  "scripts": {
    "build": "tsc",
    "test": "jest",
    "start": "node dist/index.js"
  },
  "files": [
    {
      "path": "src/index.ts",
      "content": "#!/usr/bin/env node\n\nimport { program } from 'commander';\nimport { hello } from './commands/hello';\n\nconst packageJson = require('../package.json');\n\nprogram\n  .name('{{packageName}}')\n  .description('{{description}}')\n  .version(packageJson.version);\n\nprogram\n  .command('hello [name]')\n  .description('Say hello to someone')\n  .option('-e, --enthusiastic', 'add enthusiasm')\n  .action(hello);\n\nprogram.parse();\n"
    },
    {
      "path": "src/commands/hello.ts",
      "content": "import chalk from 'chalk';\n\nexport function hello(name?: string, options?: { enthusiastic?: boolean }): void {\n  const greeting = name ? `Hello, ${name}!` : 'Hello, world!';\n  const message = options?.enthusiastic ? greeting + '!!!' : greeting;\n  \n  console.log(chalk.green(message));\n}\n"
    },
    {
      "path": "test/hello.test.ts",
      "content": "import { hello } from '../src/commands/hello';\n\n// Mock console.log to capture output\nconst mockLog = jest.spyOn(console, 'log').mockImplementation();\n\ndescribe('hello command', () => {\n  afterEach(() => {\n    mockLog.mockClear();\n  });\n\n  afterAll(() => {\n    mockLog.mockRestore();\n  });\n\n  it('should greet the world by default', () => {\n    hello();\n    expect(mockLog).toHaveBeenCalledWith(expect.stringContaining('Hello, world!'));\n  });\n\n  it('should greet a specific person', () => {\n    hello('Alice');\n    expect(mockLog).toHaveBeenCalledWith(expect.stringContaining('Hello, Alice!'));\n  });\n\n  it('should add enthusiasm when option is set', () => {\n    hello('Bob', { enthusiastic: true });\n    expect(mockLog).toHaveBeenCalledWith(expect.stringContaining('Hello, Bob!!!!'));\n  });\n});\n"
    }
  ],
  "metadata": {
    "tags": [
      "cli",
      "command-line",
      "typescript",
      "commander"
    ],
    "category": "CLI",
    "lastUpdated": "2025-06-01T14:54:32.987Z"
  }
}
